"use strict";

var t = require("@babel/runtime/helpers/typeof"), e = require("@babel/runtime/helpers/extends"), n = require("@babel/runtime/helpers/classCallCheck"), i = require("@babel/runtime/helpers/createClass");

function r(t) {
    return t && "object" == typeof t && "default" in t ? t : {
        default: t
    };
}

var s = r(t), a = r(e), c = r(n), h = r(i);

function o(t) {
    var e, n, i, r, s, a, c, h, o, l, _, p, u, g, f, T, E, N, O, K, d = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, v = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "\t", A = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
    function R() {
        for (;n.length && (" " === n[n.length - 1] || n[n.length - 1] === o); ) n.pop();
    }
    function S(t) {
        if (t = void 0 === t || t, R(), n.length) {
            "\n" === n[n.length - 1] && t || n.push("\n");
            for (var e = 0; e < A; e++) n.push(o);
        }
    }
    function C() {
        var t = n.length ? n[n.length - 1] : " ";
        " " !== t && "\n" !== t && t !== o && n.push(" ");
    }
    function m() {
        n.push(i);
    }
    function k() {
        A++;
    }
    function L() {
        A && A--;
    }
    function x() {
        n.length && n[n.length - 1] === o && n.pop();
    }
    function y(t) {
        h.push(c), c = t;
    }
    function D() {
        N = "DO_BLOCK" === c, c = h.pop();
    }
    function I(t, e) {
        for (var n = 0; n < e.length; n++) if (e[n] === t) return !0;
        return !1;
    }
    function b() {
        var t = 0, n = "";
        do {
            if (u >= e.length) return [ "", "TK_EOF" ];
            n = e.charAt(u), u += 1, "\n" === n && (t += 1);
        } while (I(n, l));
        if (t > 1) for (var i = 0; i < 2; i++) S(0 === i);
        var a = 1 === t;
        if (I(n, _)) {
            if (u < e.length) for (;I(e.charAt(u), _) && (n += e.charAt(u), (u += 1) !== e.length); ) ;
            if (u !== e.length && n.match(/^[0-9]+[Ee]$/) && "-" === e.charAt(u)) {
                u += 1;
                var c = b();
                return [ n += "-".concat(c[0]), "TK_WORD" ];
            }
            return "in" === n ? [ n, "TK_OPERATOR" ] : [ n, "TK_WORD" ];
        }
        if ("(" === n || "[" === n) return [ n, "TK_START_EXPR" ];
        if (")" === n || "]" === n) return [ n, "TK_END_EXPR" ];
        if ("{" === n) return [ n, "TK_START_BLOCK" ];
        if ("}" === n) return [ n, "TK_END_BLOCK" ];
        if (";" === n) return [ n, "TK_END_COMMAND" ];
        if ("/" === n) {
            var h = "";
            if ("*" === e.charAt(u)) {
                if ((u += 1) < e.length) for (;("*" !== e.charAt(u) || !e.charAt(u + 1) || "/" !== e.charAt(u + 1)) && u < e.length && (h += e.charAt(u), 
                !((u += 1) >= e.length)); ) ;
                return u += 2, [ "/*".concat(h, "*/"), "TK_BLOCK_COMMENT" ];
            }
            if ("/" === e.charAt(u)) {
                for (h = n; "\r" !== e.charAt(u) && "\n" !== e.charAt(u) && (h += e.charAt(u), !((u += 1) >= e.length)); ) ;
                return u += 1, a && S(), [ h, "TK_COMMENT" ];
            }
        }
        if ("'" === n || '"' === n || "/" === n && ("TK_WORD" === r && "return" === s || "TK_START_EXPR" === r || "TK_END_BLOCK" === r || "TK_OPERATOR" === r || "TK_EOF" === r || "TK_END_COMMAND" === r)) {
            var o = n, g = !1;
            if (n = "", u < e.length) for (;(g || e.charAt(u) !== o) && (n += e.charAt(u), g = !g && "\\" === e.charAt(u), 
            !((u += 1) >= e.length)); ) ;
            return u += 1, "TK_END_COMMAND" === r && S(), [ o + n + o, "TK_STRING" ];
        }
        if (I(n, p)) {
            for (;u < e.length && I(n + e.charAt(u), p) && (n += e.charAt(u), !((u += 1) >= e.length)); ) ;
            return [ n, "TK_OPERATOR" ];
        }
        return [ n, "TK_UNKNOWN" ];
    }
    for (v = v || " ", d = d || 4, o = ""; d--; ) o += v;
    e = t, a = "", r = "TK_START_EXPR", s = "", n = [], N = !1, O = !1, K = !1, l = "\n\r\t ".split(""), 
    _ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$".split(""), 
    p = "+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! !! , : ? ^ ^= |=".split(" "), 
    g = "continue,try,throw,return,var,if,switch,case,default,for,while,break,function".split(","), 
    h = [ c = "BLOCK" ], A = A || 0, u = 0, f = !1;
    for (var w = !0; w; ) {
        var P = b();
        if (i = P[0], "TK_EOF" === (E = P[1])) break;
        switch (E) {
          case "TK_START_EXPR":
            O = !1, y("EXPRESSION"), "TK_END_EXPR" === r || "TK_START_EXPR" === r || ("TK_WORD" !== r && "TK_OPERATOR" !== r || I(a, g) && "function" !== a) && C(), 
            m();
            break;

          case "TK_END_EXPR":
            m(), D();
            break;

          case "TK_START_BLOCK":
            y("do" === a ? "DO_BLOCK" : "BLOCK"), "TK_OPERATOR" !== r && "TK_START_EXPR" !== r && ("TK_START_BLOCK" === r ? S() : C()), 
            m(), k();
            break;

          case "TK_END_BLOCK":
            "TK_START_BLOCK" === r ? (R(), L()) : (L(), S()), m(), D();
            break;

          case "TK_WORD":
            if (N) {
                C(), m(), C();
                break;
            }
            if ("case" === i || "default" === i) {
                ":" === s ? x() : (L(), S(), k()), m(), f = !0;
                break;
            }
            T = "NONE", "TK_END_BLOCK" === r ? I(i.toLowerCase(), [ "else", "catch", "finally" ]) ? (T = "SPACE", 
            C()) : T = "NEWLINE" : "TK_END_COMMAND" !== r || "BLOCK" !== c && "DO_BLOCK" !== c ? "TK_END_COMMAND" === r && "EXPRESSION" === c || "TK_WORD" === r ? T = "SPACE" : "TK_START_BLOCK" === r ? T = "NEWLINE" : "TK_END_EXPR" === r && (C(), 
            T = "NEWLINE") : T = "NEWLINE", "TK_END_BLOCK" !== r && I(i.toLowerCase(), [ "else", "catch", "finally" ]) ? S() : I(i, g) || "NEWLINE" === T ? "else" === s ? C() : ("TK_START_EXPR" !== r && "=" !== s || "function" !== i) && ("TK_WORD" !== r || "return" !== s && "throw" !== s ? "TK_END_EXPR" !== r ? "TK_START_EXPR" === r && "var" === i || ":" === s || ("if" === i && "TK_WORD" === r && "else" === a ? C() : S()) : I(i, g) && ")" !== s && S() : C()) : "SPACE" === T && C(), 
            m(), a = i, "var" === i && (O = !0, K = !1);
            break;

          case "TK_END_COMMAND":
            m(), O = !1;
            break;

          case "TK_STRING":
            "TK_START_BLOCK" === r || "TK_END_BLOCK" === r ? S() : "TK_WORD" === r && C(), m();
            break;

          case "TK_OPERATOR":
            var B = !0, U = !0;
            if (O && "," !== i && (K = !0, ":" === i && (O = !1)), ":" === i && f) {
                m(), S();
                break;
            }
            if (f = !1, "," === i) {
                O ? K ? (m(), S(), K = !1) : (m(), C()) : "TK_END_BLOCK" === r || "BLOCK" === c ? (m(), 
                S()) : (m(), C());
                break;
            }
            "--" === i || "++" === i ? ";" === s ? (B = !0, U = !1) : (B = !1, U = !1) : "!" === i && "TK_START_EXPR" === r || "TK_OPERATOR" === r ? (B = !1, 
            U = !1) : "TK_END_EXPR" === r ? (B = !0, U = !0) : "." === i ? (B = !1, U = !1) : ":" === i && (B = !!s.match(/^\d+$/)), 
            B && C(), m(), U && C();
            break;

          case "TK_BLOCK_COMMENT":
            S(), m(), S();
            break;

          case "TK_COMMENT":
            C(), m(), S();
            break;

          case "TK_UNKNOWN":
            m();
        }
        r = E, s = i;
    }
    return n.join("");
}

var l = {
    method: "xml",
    step: "  ",
    preserveComments: !1,
    tabsize: 1,
    tabchar: "\t"
};

function _(t, e) {
    return e - (t.replace(/\(/g, "").length - t.replace(/\)/g, "").length);
}

function p(t, e) {
    return t.replace(/\s{1,}/g, " ").replace(/ AND /gi, "~::~".concat(e).concat(e, "AND ")).replace(/ BETWEEN /gi, "~::~".concat(e, "BETWEEN ")).replace(/ CASE /gi, "~::~".concat(e, "CASE ")).replace(/ ELSE /gi, "~::~".concat(e, "ELSE ")).replace(/ END /gi, "~::~".concat(e, "END ")).replace(/ FROM /gi, "~::~FROM ").replace(/ GROUP\s{1,}BY/gi, "~::~GROUP BY ").replace(/ HAVING /gi, "~::~HAVING ").replace(/ IN /gi, " IN ").replace(/ JOIN /gi, "~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi, "~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi, "~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi, "~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi, "~::~RIGHT JOIN ").replace(/ ON /gi, "~::~".concat(e, "ON ")).replace(/ OR /gi, "~::~".concat(e).concat(e, "OR ")).replace(/ ORDER\s{1,}BY/gi, "~::~ORDER BY ").replace(/ OVER /gi, "~::~".concat(e, "OVER ")).replace(/\(\s{0,}SELECT /gi, "~::~(SELECT ").replace(/\)\s{0,}SELECT /gi, ")~::~SELECT ").replace(/ THEN /gi, " THEN~::~".concat(e)).replace(/ UNION /gi, "~::~UNION~::~").replace(/ USING /gi, "~::~USING ").replace(/ WHEN /gi, "~::~".concat(e, "WHEN ")).replace(/ WHERE /gi, "~::~WHERE ").replace(/ WITH /gi, "~::~WITH ").replace(/ ALL /gi, " ALL ").replace(/ AS /gi, " AS ").replace(/ ASC\s*/gi, " ASC ").replace(/ DESC\s*/gi, " DESC ").replace(/ DISTINCT /gi, " DISTINCT ").replace(/ EXISTS /gi, " EXISTS ").replace(/ NOT /gi, " NOT ").replace(/ NULL /gi, " NULL ").replace(/ LIKE /gi, " LIKE ").replace(/\s{0,}SELECT /gi, "SELECT ").replace(/\s{0,}UPDATE /gi, "UPDATE ").replace(/ SET /gi, " SET ").replace(/~::~{1,}/g, "~::~").split("~::~");
}

var u = function() {
    function t(e) {
        c.default(this, t), this.options = a.default({}, l, e), this.step = this.options.step, 
        this.preserveComments = this.options.preserveComments, this.shift = function(t) {
            var e = "  ";
            e = isNaN(parseInt(t)) ? t : new Array(t + 1).join(" ");
            for (var n = [ "\n" ], i = 0; i < 100; i++) n.push(n[i] + e);
            return n;
        }(this.step);
        var n, i = this.options.method;
        if (n = this[i], "[object Function]" !== Object.prototype.toString.call(n)) throw new Error("[".concat(i, "] is not a Formatter method."));
        this.format = function(t) {
            return this[this.options.method].call(this, t);
        };
    }
    return h.default(t, [ {
        key: "xml",
        value: function(t) {
            var e = t.replace(/>\s{0,}</g, "><").replace(/</g, "~::~<").replace(/\s*xmlns\:/g, "~::~xmlns:").replace(/\s*xmlns\=/g, "~::~xmlns=").split("~::~"), n = e.length, i = !1, r = 0, s = "", a = 0;
            for (a = 0; a < n; a++) e[a].search(/<!/) > -1 ? (s += this.shift[r] + e[a], i = !0, 
            (e[a].search(/-->/) > -1 || e[a].search(/\]>/) > -1 || e[a].search(/!DOCTYPE/) > -1) && (i = !1)) : e[a].search(/-->/) > -1 || e[a].search(/\]>/) > -1 ? (s += e[a], 
            i = !1) : /^<\w/.exec(e[a - 1]) && /^<\/\w/.exec(e[a]) && /^<[\w:\-\.\,]+/.exec(e[a - 1]) === /^<\/[\w:\-\.\,]+/.exec(e[a])[0].replace("/", "") ? (s += e[a], 
            i || r--) : e[a].search(/<\w/) > -1 && -1 === e[a].search(/<\//) && -1 === e[a].search(/\/>/) ? s = s += i ? e[a] : this.shift[r++] + e[a] : e[a].search(/<\w/) > -1 && e[a].search(/<\//) > -1 ? s = s += i ? e[a] : this.shift[r] + e[a] : e[a].search(/<\//) > -1 ? s = s += i ? e[a] : this.shift[--r] + e[a] : e[a].search(/\/>/) > -1 ? s = s += i ? e[a] : this.shift[r] + e[a] : e[a].search(/<\?/) > -1 || e[a].search(/xmlns\:/) > -1 || e[a].search(/xmlns\=/) > -1 ? s += this.shift[r] + e[a] : s += e[a];
            return "\n" === s[0] ? s.slice(1) : s;
        }
    }, {
        key: "xmlmin",
        value: function(t) {
            return (this.preserveComments ? t : t.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g, "").replace(/[ \r\n\t]{1,}xmlns/g, " xmlns")).replace(/>\s{0,}</g, "><");
        }
    }, {
        key: "json",
        value: function(t) {
            try {
                if ("undefined" == typeof JSON) return t;
                if ("string" == typeof t) return JSON.stringify(JSON.parse(t), null, this.step);
                if ("object" === s.default(t)) return JSON.stringify(t, null, this.step);
            } catch (t) {
                console.error("JSON格式错误，请检查。".concat(t.message));
            }
            return t;
        }
    }, {
        key: "jsonmin",
        value: function(t) {
            return "undefined" == typeof JSON ? t : JSON.stringify(JSON.parse(t), null, 0);
        }
    }, {
        key: "css",
        value: function(t) {
            var e = t.replace(/\s{1,}/g, " ").replace(/\{/g, "{~::~").replace(/\}/g, "~::~}~::~").replace(/\;/g, ";~::~").replace(/\/\*/g, "~::~/*").replace(/\*\//g, "*/~::~").replace(/~::~\s{0,}~::~/g, "~::~").split("~::~"), n = e.length, i = 0, r = "", s = 0;
            for (s = 0; s < n; s++) /\{/.exec(e[s]) ? r += this.shift[i++] + e[s] : /\}/.exec(e[s]) ? r += this.shift[--i] + e[s] : (/\*\\/.exec(e[s]), 
            r += this.shift[i] + e[s]);
            return r.replace(/^\n{1,}/, "");
        }
    }, {
        key: "cssone",
        value: function(t) {
            return t && (t = (t = (t = (t = (t = t.replace(/(\n|\t|\s)*/gi, "$1")).replace(/\n|\t|\s(\{|\}|\,|\:|\;)/gi, "$1")).replace(/(\{|\}|\,|\:|\;)\s/gi, "$1")).replace(/(\})/gi, "$1\n")).replace(/(\*\/)/gi, "$1\n")), 
            t;
        }
    }, {
        key: "cssmin",
        value: function(t) {
            return (this.preserveComments ? t : t.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g, "")).replace(/\s{1,}/g, " ").replace(/\{\s{1,}/g, "{").replace(/\}\s{1,}/g, "}").replace(/\;\s{1,}/g, ";").replace(/\/\*\s{1,}/g, "/*").replace(/\*\/\s{1,}/g, "*/");
        }
    }, {
        key: "sql",
        value: function(t) {
            var e = t.replace(/\s{1,}/g, " ").replace(/\'/gi, "~::~'").split("~::~"), n = e.length, i = [], r = 0, s = this.step, a = 0, c = "", h = 0;
            for (h = 0; h < n; h++) i = h % 2 ? i.concat(e[h]) : i.concat(p(e[h], s));
            for (n = i.length, h = 0; h < n; h++) a = _(i[h], a), /\s{0,}\s{0,}SELECT\s{0,}/.exec(i[h]) && (i[h] = i[h].replace(/\,/g, ",\n".concat(s).concat(s))), 
            /\s{0,}\s{0,}SET\s{0,}/.exec(i[h]) && (i[h] = i[h].replace(/\,/g, ",\n".concat(s).concat(s))), 
            /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(i[h]) ? (r++, c += this.shift[r] + i[h]) : /\'/.exec(i[h]) ? (a < 1 && r && r--, 
            c += i[h]) : (c += this.shift[r] + i[h], a < 1 && r && r--);
            return c = c.replace(/^\n{1,}/, "").replace(/\n{1,}/g, "\n");
        }
    }, {
        key: "sqlmin",
        value: function(t) {
            return t.replace(/\s{1,}/g, " ").replace(/\s{1,}\(/, "(").replace(/\s{1,}\)/, ")");
        }
    }, {
        key: "html",
        value: function(t) {
            return function(t) {
                var e, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "\t";
                function r() {
                    return this.pos = 0, this.token = "", this.current_mode = "CONTENT", this.tags = {
                        parent: "parent1",
                        parentcount: 1,
                        parent1: ""
                    }, this.tag_type = "", this.token_text = this.last_token = this.last_text = this.token_type = "", 
                    this.Utils = {
                        whitespace: "\n\r\t ".split(""),
                        single_token: "br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed".split(","),
                        extra_liners: "head,body,/html".split(","),
                        in_array: function(t, e) {
                            for (var n = 0; n < e.length; n++) if (t === e[n]) return !0;
                            return !1;
                        }
                    }, this.get_content = function() {
                        for (var t = "", e = [], n = !1; "<" !== this.input.charAt(this.pos); ) {
                            if (this.pos >= this.input.length) return e.length ? e.join("") : [ "", "TK_EOF" ];
                            if (t = this.input.charAt(this.pos), this.pos++, this.line_char_count++, this.Utils.in_array(t, this.Utils.whitespace)) e.length && (n = !0), 
                            this.line_char_count--; else {
                                if (n) {
                                    if (this.line_char_count >= this.max_char) {
                                        e.push("\n");
                                        for (var i = 0; i < this.indent_level; i++) e.push(this.indent_string);
                                        this.line_char_count = 0;
                                    } else e.push(" "), this.line_char_count++;
                                    n = !1;
                                }
                                e.push(t);
                            }
                        }
                        return e.length ? e.join("") : "";
                    }, this.get_script = function() {
                        var t = "", e = [], n = new RegExp("<\/script>", "igm");
                        n.lastIndex = this.pos;
                        for (var i = n.exec(this.input), r = i ? i.index : this.input.length; this.pos < r; ) {
                            if (this.pos >= this.input.length) return e.length ? e.join("") : [ "", "TK_EOF" ];
                            t = this.input.charAt(this.pos), this.pos++, e.push(t);
                        }
                        return e.length ? e.join("") : "";
                    }, this.record_tag = function(t) {
                        this.tags["".concat(t, "count")] ? (this.tags["".concat(t, "count")]++, this.tags[t + this.tags["".concat(t, "count")]] = this.indent_level) : (this.tags["".concat(t, "count")] = 1, 
                        this.tags[t + this.tags["".concat(t, "count")]] = this.indent_level), this.tags["".concat(t + this.tags["".concat(t, "count")], "parent")] = this.tags.parent, 
                        this.tags.parent = t + this.tags["".concat(t, "count")];
                    }, this.retrieve_tag = function(t) {
                        if (this.tags["".concat(t, "count")]) {
                            for (var e = this.tags.parent; e && t + this.tags["".concat(t, "count")] !== e; ) e = this.tags["".concat(e, "parent")];
                            e && (this.indent_level = this.tags[t + this.tags["".concat(t, "count")]], this.tags.parent = this.tags["".concat(e, "parent")]), 
                            delete this.tags["".concat(t + this.tags["".concat(t, "count")], "parent")], delete this.tags[t + this.tags["".concat(t, "count")]], 
                            1 === this.tags["".concat(t, "count")] ? delete this.tags["".concat(t, "count")] : this.tags["".concat(t, "count")]--;
                        }
                    }, this.get_tag = function() {
                        var t = "", e = [], n = !1;
                        do {
                            if (this.pos >= this.input.length) return e.length ? e.join("") : [ "", "TK_EOF" ];
                            t = this.input.charAt(this.pos), this.pos++, this.line_char_count++, this.Utils.in_array(t, this.Utils.whitespace) ? (n = !0, 
                            this.line_char_count--) : ("'" !== t && '"' !== t || e[1] && "!" === e[1] || (t += this.get_unformatted(t), 
                            n = !0), "=" === t && (n = !1), e.length && "=" !== e[e.length - 1] && ">" !== t && n && (this.line_char_count >= this.max_char ? (this.print_newline(!1, e), 
                            this.line_char_count = 0) : (e.push(" "), this.line_char_count++), n = !1), e.push(t));
                        } while (">" !== t);
                        var i, r = e.join("");
                        i = -1 !== r.indexOf(" ") ? r.indexOf(" ") : r.indexOf(">");
                        var s = r.substring(1, i).toLowerCase();
                        if ("/" === r.charAt(r.length - 2) || this.Utils.in_array(s, this.Utils.single_token)) this.tag_type = "SINGLE"; else if ("script" === s) this.record_tag(s), 
                        this.tag_type = "SCRIPT"; else if ("style" === s) this.record_tag(s), this.tag_type = "STYLE"; else if ("!" === s.charAt(0)) if (-1 !== s.indexOf("[if")) {
                            if (-1 !== r.indexOf("!IE")) {
                                var a = this.get_unformatted("--\x3e", r);
                                e.push(a);
                            }
                            this.tag_type = "START";
                        } else if (-1 !== s.indexOf("[endif")) this.tag_type = "END", this.unindent(); else if (-1 !== s.indexOf("[cdata[")) {
                            var c = this.get_unformatted("]]>", r);
                            e.push(c), this.tag_type = "SINGLE";
                        } else {
                            var h = this.get_unformatted("--\x3e", r);
                            e.push(h), this.tag_type = "SINGLE";
                        } else "/" === s.charAt(0) ? (this.retrieve_tag(s.substring(1)), this.tag_type = "END") : (this.record_tag(s), 
                        this.tag_type = "START"), this.Utils.in_array(s, this.Utils.extra_liners) && this.print_newline(!0, this.output);
                        return e.join("");
                    }, this.get_unformatted = function(t, e) {
                        if (e && -1 !== e.indexOf(t)) return "";
                        var n = "", i = "", r = !0;
                        do {
                            if (n = this.input.charAt(this.pos), this.pos++, this.Utils.in_array(n, this.Utils.whitespace)) {
                                if (!r) {
                                    this.line_char_count--;
                                    continue;
                                }
                                if ("\n" === n || "\r" === n) {
                                    i += "\n";
                                    for (var s = 0; s < this.indent_level; s++) i += this.indent_string;
                                    r = !1, this.line_char_count = 0;
                                    continue;
                                }
                            }
                            i += n, this.line_char_count++, r = !0;
                        } while (-1 === i.indexOf(t));
                        return i;
                    }, this.get_token = function() {
                        var t;
                        if ("TK_TAG_SCRIPT" === this.last_token) {
                            var e = this.get_script();
                            return "string" != typeof e ? e : [ t = o(e, this.indent_size, this.indent_character, this.indent_level), "TK_CONTENT" ];
                        }
                        return "CONTENT" === this.current_mode ? "string" != typeof (t = this.get_content()) ? t : [ t, "TK_CONTENT" ] : "TAG" === this.current_mode ? "string" != typeof (t = this.get_tag()) ? t : [ t, "TK_TAG_".concat(this.tag_type) ] : void 0;
                    }, this.printer = function(t, e, n, i) {
                        this.input = t || "", this.output = [], this.indent_character = e || " ", this.indent_string = "", 
                        this.indent_size = n || 2, this.indent_level = 0, this.max_char = i || 70, this.line_char_count = 0;
                        for (var r = 0; r < this.indent_size; r++) this.indent_string += this.indent_character;
                        this.print_newline = function(t, e) {
                            if (this.line_char_count = 0, e && e.length) {
                                if (!t) for (;this.Utils.in_array(e[e.length - 1], this.Utils.whitespace); ) e.pop();
                                e.push("\n");
                                for (var n = 0; n < this.indent_level; n++) e.push(this.indent_string);
                            }
                        }, this.print_token = function(t) {
                            this.output.push(t);
                        }, this.indent = function() {
                            this.indent_level++;
                        }, this.unindent = function() {
                            this.indent_level > 0 && this.indent_level--;
                        };
                    }, this;
                }
                for ((e = new r).printer(t, i, n); ;) {
                    var s = e.get_token();
                    if (e.token_text = s[0], e.token_type = s[1], "TK_EOF" === e.token_type) break;
                    switch (e.token_type) {
                      case "TK_TAG_START":
                      case "TK_TAG_SCRIPT":
                      case "TK_TAG_STYLE":
                        e.print_newline(!1, e.output), e.print_token(e.token_text), e.indent(), e.current_mode = "CONTENT";
                        break;

                      case "TK_TAG_END":
                        e.print_newline(!0, e.output), e.print_token(e.token_text), e.current_mode = "CONTENT";
                        break;

                      case "TK_TAG_SINGLE":
                        e.print_newline(!1, e.output), e.print_token(e.token_text), e.current_mode = "CONTENT";
                        break;

                      case "TK_CONTENT":
                        "" !== e.token_text && (e.print_newline(!1, e.output), e.print_token(e.token_text)), 
                        e.current_mode = "TAG";
                    }
                    e.last_token = e.token_type, e.last_text = e.token_text;
                }
                return e.output.join("");
            }(t = t.replace(/^\s+/, ""), this.options.tabsize || 1, this.options.tabchar || "\t", 80);
        }
    }, {
        key: "htmlmin",
        value: function(t) {
            return t;
        }
    }, {
        key: "js",
        value: function(t) {
            return o(t = t.replace(/^\s+/, ""), this.options.tabsize || 1, this.options.tabchar || "\t");
        }
    }, {
        key: "jsmin",
        value: function(t) {
            return t;
        }
    } ]), t;
}();

module.exports = function(t, e) {
    return new u(e).format(t);
};
